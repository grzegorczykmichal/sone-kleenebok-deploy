{"version":3,"sources":["serviceWorker.ts","sections/Listings/Listings.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","LISTINGS","gql","DELETE_LISTING","apollo","ApolloClient","uri","render","client","title","useQuery","data","refetch","loading","error","useMutation","fireDeletion","deletionLoading","deletionError","listings","useReducer","state","action","type","Array","from","Set","payload","filter","id","deletionRequests","dispatchDeletionRequest","deleteRequest","deleteListing","a","variables","deletionLoadingMessage","deletionErrormessage","length","map","listing","key","indexOf","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qfCHN,IAAMC,EAAWC,YAAH,KAgBRC,EAAiBD,YAAH,KCvBdE,EAAS,IAAIC,IAAa,CAE9BC,IAAK,SAGPC,iBACE,kBAAC,IAAD,CAAgBC,OAAQJ,GACtB,mBD6BoB,SAAC,GAAmC,IAAD,IAAhCK,aAAgC,MAAxB,WAAwB,IACfC,YAAuBT,GAAzDU,EADiD,EACjDA,KAAMC,EAD2C,EAC3CA,QAASC,EADkC,EAClCA,QAASC,EADyB,EACzBA,MADyB,EAKrDC,YAAuDZ,GALF,mBAGvDa,EAHuD,YAI5CC,EAJ4C,EAIrDJ,QAAiCK,EAJoB,EAI3BJ,MAExBK,EAAWR,EAAOA,EAAKQ,SAAW,GANiB,EAQLC,sBAClD,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACtB,MAAoB,YAAhBA,EAAOC,KACFC,MAAMC,KAAK,IAAIC,IAAJ,sBAAYL,GAAZ,CAAmBC,EAAOK,YAE1B,WAAhBL,EAAOC,KACFF,EAAMO,QAAO,SAACC,GAAD,OAAgBA,IAAOP,EAAOK,WAE7CN,IAET,IAlBuD,mBAQlDS,EARkD,KAQhCC,EARgC,KAwBnDC,EAAgB,SAACH,GAAD,OAAgB,WACpCE,EAAwB,CAAER,KAAM,UAAWI,QAASE,MAGhDI,EAAgB,SAACJ,GAAD,6BAAgB,sBAAAK,EAAA,sEAC9BlB,EAAa,CAAEmB,UAAW,CAAEN,QADE,OAEpCE,EAAwB,CAAER,KAAM,SAAUI,QAASE,IACnDjB,IAHoC,4CAMtC,GAAIC,EACF,OAAO,2CAGT,GAAIC,EACF,OAAO,iEAGT,IAAMsB,EAAyBnB,EAAkB,4CAAwB,KACnEoB,EAAuBnB,EAAgB,oCAAgB,KAE7D,OACE,6BACE,4BAAKT,GACJU,EAASmB,OAAS,GACjB,4BACGnB,EAASoB,KAAI,SAAAC,GACZ,OACE,wBAAIC,IAAKD,EAAQX,IACdW,EAAQ/B,MAAO,IAChB,8BAC6C,IAA1CqB,EAAiBY,QAAQF,EAAQX,IAChC,8BACE,4BAAQc,SArCLd,EAqC4BW,EAAQX,GArCrB,WACpCE,EAAwB,CAAER,KAAM,SAAUI,QAASE,OAoCjC,UAGA,4BAAQc,QAASV,EAAcO,EAAQX,KAAvC,OAGF,4BAAQc,QAASX,EAAcQ,EAAQX,KAAvC,YA3CI,IAACA,MAmDlBO,EACAC,KCrGH,CAAU5B,MAAM,qBAElBmC,SAASC,eAAe,SF0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.e99a38ef.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useReducer } from \"react\";\n// import { useQuery, useMutation } from \"../../lib/api\";\nimport { useQuery, useMutation } from \"react-apollo\";\nimport { Listings as ListingsData } from \"./__generated__/Listings\";\nimport {\n  DeleteListing as DeleteListingData,\n  DeleteListingVariables\n} from \"./__generated__/DeleteListing\";\nimport { gql } from \"apollo-boost\";\n// import {\n//   DeleteListingData,\n//   DeleteListingVariables,\n//   ListingsData\n// } from \"./types\";\n\nconst LISTINGS = gql`\n  query Listings {\n    listings {\n      id\n      title\n      image\n      address\n      price\n      numOfGuests\n      numOfBeds\n      numOfBaths\n      rating\n    }\n  }\n`;\n\nconst DELETE_LISTING = gql`\n  mutation DeleteListing($id: ID!) {\n    deleteListing(id: $id) {\n      id\n      title\n    }\n  }\n`;\n\ninterface Props {\n  title: string;\n}\n\nexport const Listings = ({ title = \"Listings\" }: Props) => {\n  const { data, refetch, loading, error } = useQuery<ListingsData>(LISTINGS);\n  const [\n    fireDeletion,\n    { loading: deletionLoading, error: deletionError }\n  ] = useMutation<DeleteListingData, DeleteListingVariables>(DELETE_LISTING);\n  const listings = data ? data.listings : [];\n\n  const [deletionRequests, dispatchDeletionRequest] = useReducer(\n    (state = [], action) => {\n      if (action.type === \"request\") {\n        return Array.from(new Set([...state, action.payload]));\n      }\n      if (action.type === \"cancel\") {\n        return state.filter((id: string) => id !== action.payload);\n      }\n      return state;\n    },\n    []\n  );\n  const cancelRequest = (id: string) => () => {\n    dispatchDeletionRequest({ type: \"cancel\", payload: id });\n  };\n\n  const deleteRequest = (id: string) => () => {\n    dispatchDeletionRequest({ type: \"request\", payload: id });\n  };\n\n  const deleteListing = (id: string) => async () => {\n    await fireDeletion({ variables: { id } });\n    dispatchDeletionRequest({ type: \"cancel\", payload: id });\n    refetch();\n  };\n\n  if (loading) {\n    return <h2>Loading ...</h2>;\n  }\n\n  if (error) {\n    return <h2>Something went wrong &#x1f480;</h2>;\n  }\n\n  const deletionLoadingMessage = deletionLoading ? <h4>Deleting ...</h4> : null;\n  const deletionErrormessage = deletionError ? <h4>Err!</h4> : null;\n\n  return (\n    <div>\n      <h2>{title}</h2>\n      {listings.length > 0 && (\n        <ul>\n          {listings.map(listing => {\n            return (\n              <li key={listing.id}>\n                {listing.title}{\" \"}\n                <div>\n                  {deletionRequests.indexOf(listing.id) !== -1 ? (\n                    <span>\n                      <button onClick={cancelRequest(listing.id)}>\n                        cancel\n                      </button>\n                      <button onClick={deleteListing(listing.id)}>OK</button>\n                    </span>\n                  ) : (\n                    <button onClick={deleteRequest(listing.id)}>delete</button>\n                  )}\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      {deletionLoadingMessage}\n      {deletionErrormessage}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport { Listings } from \"./sections\";\n\nconst apollo = new ApolloClient({\n  // uri: \"http://localhost:9000/api\"\n  uri: \"/api\"\n});\n\nrender(\n  <ApolloProvider client={apollo}>\n    <Listings title=\"THouse Listings\" />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}